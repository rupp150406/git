# BLEGON API DOCUMENTATION
=====================

Base URL: /api

## Authentication
-------------
Most endpoints require authentication using Bearer token. Include the token in the Authorization header:
```
Authorization: Bearer <your_token>
```

## Public Endpoints
---------------

### Authentication

1. **Register User**
   - **URL**: POST /auth/register
   - **Description**: Register a new user account
   - **Request Body**:
   ```json
   {
     "name": "string",
     "username": "string",
     "email": "string",
     "password": "string",
     "password_confirmation": "string"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Registration successful",
     "data": {
       "user": {
         "id": "integer",
         "name": "string",
         "username": "string",
         "email": "string",
         "created_at": "datetime"
       },
       "token": "string"
     }
   }
   ```

2. **Login User**
   - **URL**: POST /auth/login
   - **Description**: Login to get authentication token
   - **Request Body**:
   ```json
   {
     "email": "string",
     "password": "string"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Login successful",
     "data": {
       "user": {
         "id": "integer",
         "name": "string",
         "username": "string",
         "email": "string"
       },
       "token": "string"
     }
   }
   ```

### Users

1. **Get User Profile (Public)**
   - **URL**: GET /users/{username}
   - **Description**: Get public profile of a user by username
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "user": {
         "id": "integer",
         "name": "string",
         "username": "string",
         "bio": "string",
         "picture": "string",
         "followers_count": "integer",
         "followees_count": "integer",
         "posts_count": "integer"
       },
       "posts": [
         {
           "id": "integer",
           "title": "string",
           "content": "string",
           "created_at": "datetime"
         }
       ]
     }
   }
   ```

### Posts

1. **Get Posts**
   - **URL**: GET /posts
   - **Description**: Retrieve all published blog posts
   - **Query Parameters**:
     - per_page: integer (default: 15)
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "current_page": "integer",
       "data": [
         {
           "id": "integer",
           "user_id": "integer",
           "title": "string",
           "content": "string",
           "thumbnail_path": "string",
           "status": "string",
           "created_at": "datetime",
           "updated_at": "datetime",
           "user": {
             "id": "integer",
             "name": "string",
             "username": "string"
           },
           "categories": [
             {
               "id": "integer",
               "name": "string"
             }
           ]
         }
       ],
       "total": "integer",
       "per_page": "integer",
       "last_page": "integer"
     }
   }
   ```

2. **View Post**
   - **URL**: GET /posts/{postId}
   - **Description**: View a specific blog post by ID
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "id": "integer",
       "user_id": "integer",
       "title": "string",
       "content": "string",
       "thumbnail_path": "string",
       "status": "string",
       "created_at": "datetime",
       "updated_at": "datetime",
       "user": {
         "id": "integer",
         "name": "string",
         "username": "string"
       },
       "categories": [
         {
           "id": "integer",
           "name": "string"
         }
       ],
       "comments": [
         {
           "id": "integer",
           "user_id": "integer",
           "content": "string",
           "created_at": "datetime",
           "user": {
             "id": "integer",
             "name": "string",
             "username": "string"
           }
         }
       ]
     }
   }
   ```

### Search

1. **Search**
   - **URL**: POST /search
   - **Description**: Search for posts, users, or categories
   - **Request Body**:
   ```json
   {
     "query": "string",
     "type": "string" // Optional: "posts", "users", or "categories"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "posts": [
         {
           "id": "integer",
           "title": "string",
           "content": "string",
           "created_at": "datetime"
         }
       ],
       "users": [
         {
           "id": "integer",
           "name": "string",
           "username": "string"
         }
       ],
       "categories": [
         {
           "id": "integer",
           "name": "string"
         }
       ]
     }
   }
   ```

## Protected Endpoints (Requires Authentication)
------------------------------------------

### Authentication

1. **Logout**
   - **URL**: POST /auth/logout
   - **Description**: Logout user and invalidate token
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Logged out successfully"
   }
   ```

### User Management

1. **Get User Profile**
   - **URL**: GET /user/profile
   - **Description**: Get authenticated user's profile with posts
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "user": {
         "id": "integer",
         "name": "string",
         "username": "string",
         "email": "string",
         "bio": "string",
         "picture": "string",
         "followers_count": "integer",
         "followees_count": "integer",
         "posts_count": "integer"
       },
       "posts": [
         {
           "id": "integer",
           "title": "string",
           "content": "string",
           "created_at": "datetime"
         }
       ]
     }
   }
   ```

2. **Update User Profile**
   - **URL**: POST /user/profile
   - **Description**: Update authenticated user's profile
   - **Request Body** (multipart/form-data):
   ```json
   {
     "name": "string",
     "username": "string",
     "email": "string",
     "bio": "string",
     "picture": "file (image)"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Profile updated successfully",
     "data": {
       "id": "integer",
       "name": "string",
       "username": "string",
       "email": "string",
       "bio": "string",
       "picture": "string"
     }
   }
   ```

3. **Delete User Account**
   - **URL**: DELETE /user/profile
   - **Description**: Delete authenticated user's account
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Your account has been deleted successfully"
   }
   ```

4. **Follow User**
   - **URL**: POST /user/follow/{userId}
   - **Description**: Follow another user
   - **Response**:
   ```json
   {
     "success": true,
     "message": "You are now following {user_name}"
   }
   ```

5. **Unfollow User**
   - **URL**: DELETE /user/follow/{userId}
   - **Description**: Unfollow another user
   - **Response**:
   ```json
   {
     "success": true,
     "message": "You have unfollowed {user_name}"
   }
   ```

### Categories

1. **Get Categories**
   - **URL**: GET /categories
   - **Description**: Get all available categories
   - **Response**:
   ```json
   {
     "success": true,
     "data": [
       {
         "id": "integer",
         "name": "string",
         "posts_count": "integer"
       }
     ]
   }
   ```

### Posts Management

1. **Create Post**
   - **URL**: POST /posts
   - **Description**: Create a new blog post
   - **Request Body** (multipart/form-data):
   ```json
   {
     "title": "string",
     "content": "string",
     "status": "string", // "draft" or "published"
     "category_ids": "array", // [1, 2, 3]
     "images": "array of files" // Optional
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Post created successfully",
     "data": {
       "id": "integer",
       "title": "string",
       "content": "string",
       "status": "string",
       "created_at": "datetime"
     }
   }
   ```

2. **Get Post for Editing**
   - **URL**: GET /posts/{postId}/edit
   - **Description**: Get post data for editing (only for post owner)
   - **Response**:
   ```json
   {
     "success": true,
     "data": {
       "id": "integer",
       "title": "string",
       "content": "string",
       "status": "string",
       "category_ids": ["integer"],
       "images": [
         {
           "id": "integer",
           "path": "string"
         }
       ]
     }
   }
   ```

3. **Update Post**
   - **URL**: POST /posts/{postId}
   - **Description**: Update an existing blog post (only for post owner)
   - **Request Body** (multipart/form-data):
   ```json
   {
     "title": "string",
     "content": "string",
     "status": "string", // "draft" or "published"
     "category_ids": "array", // [1, 2, 3]
     "images": "array of files", // Optional new images
     "removed_image_ids": "array" // Optional IDs of images to remove
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Post updated successfully",
     "data": {
       "id": "integer",
       "title": "string",
       "content": "string",
       "status": "string",
       "updated_at": "datetime"
     }
   }
   ```

4. **Delete Post**
   - **URL**: DELETE /posts/{postId}
   - **Description**: Delete a blog post (only for post owner)
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Post deleted successfully"
   }
   ```

5. **Upload Images**
   - **URL**: POST /posts/upload-image
   - **Description**: Upload images for a post (can be used for draft posts)
   - **Request Body** (multipart/form-data):
   ```json
   {
     "images": "array of files"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "data": [
       {
         "id": "integer",
         "path": "string",
         "url": "string"
       }
     ]
   }
   ```

### Bookmarks

1. **Get Bookmarks**
   - **URL**: GET /bookmarks
   - **Description**: Get all bookmarked posts for the authenticated user
   - **Response**:
   ```json
   {
     "success": true,
     "data": [
       {
         "id": "integer",
         "post": {
           "id": "integer",
           "title": "string",
           "content": "string",
           "created_at": "datetime",
           "user": {
             "id": "integer",
             "name": "string",
             "username": "string"
           }
         },
         "created_at": "datetime"
       }
     ]
   }
   ```

2. **Toggle Bookmark**
   - **URL**: POST /bookmarks/toggle
   - **Description**: Add or remove a bookmark for a post
   - **Request Body**:
   ```json
   {
     "post_id": "integer"
   }
   ```
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Post bookmarked successfully" // or "Bookmark removed successfully"
   }
   ```

### Notifications

1. **Get Notifications**
   - **URL**: GET /notifications
   - **Description**: Get all notifications for the authenticated user
   - **Response**:
   ```json
   {
     "success": true,
     "data": [
       {
         "id": "string",
         "type": "string",
         "notifiable_type": "string",
         "notifiable_id": "integer",
         "data": {
           "message": "string",
           "user_id": "integer",
           "user_name": "string",
           "post_id": "integer", // Optional
           "post_title": "string" // Optional
         },
         "read_at": "datetime", // null if unread
         "created_at": "datetime"
       }
     ],
     "unread_count": "integer"
   }
   ```

2. **Mark Notification as Read**
   - **URL**: PUT /notifications/{notificationId}/read
   - **Description**: Mark a specific notification as read
   - **Response**:
   ```json
   {
     "success": true,
     "message": "Notification marked as read"
   }
   ```

3. **Mark All Notifications as Read**
   - **URL**: PUT /notifications/read-all
   - **Description**: Mark all notifications as read
   - **Response**:
   ```json
   {
     "success": true,
     "message": "All notifications marked as read"
   }
   ```

## Error Responses
--------------
All endpoints may return the following error responses:

1. **Validation Error (422)**:
   ```json
   {
     "success": false,
     "message": "Validation failed",
     "errors": {
       "field_name": ["error message"]
     }
   }
   ```

2. **Authentication Error (401)**:
   ```json
   {
     "success": false,
     "message": "Unauthenticated"
   }
   ```

3. **Authorization Error (403)**:
   ```json
   {
     "success": false,
     "message": "You are not authorized to perform this action"
   }
   ```

4. **Resource Not Found (404)**:
   ```json
   {
     "success": false,
     "message": "Resource not found"
   }
   ```

5. **Server Error (500)**:
   ```json
   {
     "success": false,
     "message": "Internal server error"
   }
   ```